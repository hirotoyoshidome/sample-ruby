<=>は宇宙船演算子で
左辺が大きいとき1
等しいとき0
左辺が小さいとき-1を返す

:の形のものはシンボルという

moduleはinterfaceみたいなもの

HashはMapみたいなもの

pメソッドはデバッグ出力に使われる

演算子も全て何かしらのメソッドの演算子オーバーライド

do endは{}でも使えるが慣習的にendを使用しリソース管理等に{}を使用する

java同様ガベージコレクションがある

配列とハッシュはどちらもEnumerableモジュールを継承しているためeachやeach_with_index等が使用できる(イテレータはEnumeratorクラス)

java同様配列とハッシュはオブジェクト自体は格納していなくて参照を格納している

ブール値判定にはメソッドに?がつく(慣習的に)
バッククウォートで括るとその中身をシェルコマンドとして認識する

コマンドが出力した内容を元に文字列を構築する

%記法を使うとエスケープする必要がなくなる

ヒアドキュメント(EOSの奴)も使用可能

先頭に?を付けると文字リテラルとして扱われる(文字列ではないよ)

正規表現を使用する場合には
/regExp/ =~ 対象の文字列
とする(バックスラッシュ記法もある)
マッチしたものは
$1という変数で表す
($1や$2などは組み込み変数で現在のコンテキスト(メソッドなど)で最後に行われた正規表現マッチの1番目のキャプチャを保持している)

文字列のイテレータにはeach_byte each_line each_charがある

sprintfメソッドを使用することでフォーマットを指定できる

またStringの#メソッドにもフォーマット機能がある

シンボルはinternされた文字列でシンボルオブジェクトを取得するにはシンボルリテラルを使用する

文字列では内容が同じでも同一のオブジェクトとは限らないがシンボルでは内容が同じなら同一のオブジェクトとなる

また文字列は変更可能だがシンボルは変更不可である

そのためハッシュコードのキーなどで頻出

組み込み変数$KCODEはRuby処理系の規定のエンコードを保持するグローバル変数

Ruby1.9からはEncodingオブジェクトで表現されている

またマルチバイトを処理できるようになった

バイト列を扱いたい場合はEncoding::ASCII_8BITという文字列を使用する

マジックコメントはソースコードがどの方式でエンコードされているかを判定するもの(# -*- coding utf-8 -*-のように記述)

String#encodeメソッドでもエンコードを変更できる

force_encodingメソッドでは文字列が保持しているバイト表現を変化させることなくエンコーディング情報のみを変更する
(乱用禁止)

Rubyプログラムを起動する際に外部から渡された引数は組み込み定数ARGV(配列)に入る

Rubyではファイルやトランザクション、DBのような外部リソースを利用したときに自動的にcloseされる(ブロックを使用した場合のみ)

Fileオブジェクトのイテレータにはeach_byte each_line each_charがある

ファイル操作のとき現在のバイト位置はFile#pos属性によって取得できる

またFile#seekメソッドで設定できる

組み込み定数$stdin $stdout $stderrは標準入出力を表すIOオブジェクトを保持している(input output error)

組み込み定数ARGFはプログラムの引数に基づいて構成される仮想のファイルを表す

ダックタイピングとは継承関係に基づかない多態性のこと

ARGFはIOオブジェクトではないがIOオブジェクトのように使用できる

そのためダックタイピングをする事ができIOオブジェクトと区別する必要はない

StringIOは文字列に対してそれがIOオブジェクトであるかのように入出力を行うためのラッパークラス

外部エンコーディングは外部リソースのエンコーディングのこと

内部エンコーディングは外部エンコーディングの指定のあとに設定されたエンコーディングのこと

IOが内部エンコーディングと外部エンコーディングの情報を保持している

File#openメソッドを使用するときに指定できる

デフォルトの外部エンコーディングは
Encoding.default_externalで参照できこれは環境によって変化する

Ruby側で自動的にコード変換を行う

Rubyの変数は先頭が
小文字orアンダースコア:ローカル変数
@ : インスタンス変数
@@ : クラス変数
$ : グローバル変数
大文字 : 定数
となっている

インスタンス変数とグローバル変数以外は初期化が必須である

ローカル変数が一番スコープが狭い
グローバル変数が一番広い

定数はマジックナンバーを使用しないために使う

擬似変数とはnil false true self __FILE__ __LINE__ __ENCODING__のこと

Ruby処理系が設定するオブジェクトを参照している

selfは現在のオブジェクトを示す

__FILE__はその場所のソースファイル名を表す

__LINE__はその場所の行番号を表す

__ENCODING__はその場所のソースファイルのエンコーディングを保持している

Ribyではクラスはキャメルケースで設定するが他はスネークケースで設定する

インクリメントとデクリメントはRubyにはないためi += 1や i = i.nextのようにする

多重代入する際に右辺の方が多く存在し
多値が発生した場合左辺に*修飾を利用すると余った部分を配列にしてまとめてくれる

また右辺に*がある時は配列を展開する

初期化イディオムは
@a ||= method
のように記述し@aが真であるときメソッドは動作しないが偽のときメソッドを実行する

範囲内演算子の .. と ...はRangeオブジェクトを生成している

3項演算子も使用できるがRubyにif式が使用できる
var = a ? b : c
var = if a then b else c end
は等価の式である

Rubyではfor文はあるけど使用しない
イテレータで行う

イテレータはloop(無限ループ) times upto downtoがeach以外にもある

ループから抜けるにはbreak next redoを使用する
nextはcontinueと一緒redoはlabelを使用した場合と一緒(最初からまたループする)

例外処理にはbegin endで括りrescueで例外をキャッチする

rescueの後ろにエラークラスを指定できる

指定しないと全てのエラーを受け取る

例外を捕捉するには捕捉変数のerrorをしていする(puts error.messageで出力)

begin end内にelseがあると例外が発生しなかったときの処理を指定できる

ensureはfinallyの役割を担う

rescueを書かないとエラーを握り潰す

rescueは修飾子としても使用できる

明示的にエラーを発生させるにはraiseを使用する

スレッドで最後に発生した例外は組み込み変数$!で参照できる

深いループを脱出(大域脱出)するにはcatch throwを使用する
throwの引数でシンボルを渡しその引数にマッチするcatchまで脱出する

selfはthisに該当

全てのクラスはObjectクラスを通じてKernelモジュールをincludeしているためputsやpメソッドが使用できる

returnは省略可能だが多値を返す(配列になる)場合はreturnは必須

returnのみの場合はnilを返す

voidに当たるのもはRubyにはないがどうしても値を返したくない場合は最期にnilを書く

メソッドの引数にはデフォルト値を設定できる

可変長引数は*を使用して設定できる(配列になる)

ブロック付きメソッド(|a|の様な奴)はループの際やリソース管理 コールバック関数 イベントハンドラの時に使用される(コードブロックは1つのみしか渡せない)

ブロックはクロージャーである
つまり外側の変数にもアクセスできる
(メソッドはクロージャーではない)

クロージャーはユーザーアプリケーションに対して内部情報を隠蔽するために使用される

ブロック引数に続けてブロックローカル変数を宣言できる

yield式はメソッド内から呼び出し側のブロックをコールバックする構文

組み込み関数block_given?では現在のメソッド呼び出しに対するブロックの有無を判定する

yieldはブロックに対するコールバックを行うため呼び出しもとがブロックを使用しない場合は例外が発生する

受け取ったブロックを変数に代入したり他のメソッド呼び出しの引数にする場合は仮引数リストの最後に&で修飾された引数を置くことで呼び出し側のブロックを表すProcオブジェクトが格納される

ブロックをProc化してためておいて後で使用することが可能になる
(逆にProcオブジェクトをブロックの代わりにブロック付きメソッドに渡して使用することもできるため(同様に&修飾子を付ける))

クラスメソッド(static)を定義するにはメソッド名の前にクラス名をつける
(selfでもよい)

特異メソッド 特異クラスを定義することが可能

特異メソッドは特異クラスのインスタンスメソッドである

メタクラスとはClassオブジェクトの特異クラスのこと

モジュールはインスタンスを生成できないクラスのようなもの

Mix-inは制限された多重継承のこと

クラスは１つしか継承できないがモジュールなら複数継承できる

モジュールはincludeして利用することも可能

includeしたモジュールはクラスのancestorsメソッドに現れる

ActiveSupportはWebアプリケーションの開発に便利なRuby拡張を束ねたライブラリ

モジュールは名前空間の提供でも使用される(packageではない)

Rubyではメソッド名のみで使用メソッドを探索するためオーバーロードは実現できない

代替手段として可変長引数などで内部で分岐させて処理する
